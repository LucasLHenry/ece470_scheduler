"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UVicCourseScraper = void 0;
var cheerio = __importStar(require("cheerio"));
var got_1 = __importDefault(require("got"));
var urls_1 = require("./common/urls");
var utils_1 = require("./common/utils");
var catalog_1 = require("./kuali/catalog");
var courseListingEntries_1 = require("./pages/courseListingEntries");
var detailedClassInformation_1 = require("./pages/detailedClassInformation");
var mapsAndBuildings_1 = require("./pages/uvic.ca/mapsAndBuildings");
var UVicCourseScraper = /** @class */ (function () {
    function UVicCourseScraper() {
    }
    /**
     * Gets all courses from the Kuali catalog. Automatically uses the current term if not defined.
     * @param term i.e. '202009', '202101'
     */
    UVicCourseScraper.getCourses = function (term) {
        if (term === void 0) { term = (0, utils_1.getCurrentTerm)(); }
        return __awaiter(this, void 0, void 0, function () {
            var url, courseCatalog;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = (0, urls_1.coursesUrl)((0, utils_1.getCatalogIdForTerm)(term));
                        return [4 /*yield*/, (0, got_1.default)(url).json()];
                    case 1:
                        courseCatalog = _a.sent();
                        return [2 /*return*/, { response: courseCatalog, timestamp: new Date(), url: url }];
                }
            });
        });
    };
    /**
     * Maps a subject and code to pid then gets course details from Kuali
     *
     * @param term i.e. '202009', '202101'
     * @param subject ie. 'CSC'
     * @param code ie. '111'
     */
    UVicCourseScraper.prototype.getCourseDetails = function (term, subject, code) {
        if (term === void 0) { term = (0, utils_1.getCurrentTerm)(); }
        return __awaiter(this, void 0, void 0, function () {
            var courseCatalog, pid, _a, response, url;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(UVicCourseScraper.subjectCodeToPidMap.size === 0)) return [3 /*break*/, 2];
                        return [4 /*yield*/, UVicCourseScraper.getCourses(term)];
                    case 1:
                        courseCatalog = (_b.sent()).response;
                        UVicCourseScraper.subjectCodeToPidMapper(term, courseCatalog);
                        _b.label = 2;
                    case 2:
                        pid = UVicCourseScraper.subjectCodeToPidMap.get("" + term + subject.toUpperCase() + code);
                        if (pid === undefined) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, UVicCourseScraper.getCourseDetailsByPid(term, pid)];
                    case 3:
                        _a = _b.sent(), response = _a.response, url = _a.url;
                        return [2 /*return*/, { response: response, timestamp: new Date(), url: url }];
                }
            });
        });
    };
    /**
     * Gets details of a single course from Kuali by pid
     *
     * @param term i.e. '202009', '202101'
     * @param pid ie. 'ByS23Pp7E'
     */
    UVicCourseScraper.getCourseDetailsByPid = function (term, pid) {
        if (term === void 0) { term = (0, utils_1.getCurrentTerm)(); }
        return __awaiter(this, void 0, void 0, function () {
            var url, courseDetails;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = (0, urls_1.courseDetailUrl)((0, utils_1.getCatalogIdForTerm)(term), pid);
                        return [4 /*yield*/, (0, got_1.default)(url).json()];
                    case 1:
                        courseDetails = _a.sent();
                        return [2 /*return*/, { response: (0, catalog_1.KualiCourseItemParser)(courseDetails), timestamp: new Date(), url: url }];
                }
            });
        });
    };
    /**
     * Gets all sections for a course in a given term from BAN1P
     *
     * @param term i.e. '202009'
     * @param subject i.e. 'SENG', 'ECON'
     * @param code i.e. '180', '225'
     */
    UVicCourseScraper.getCourseSections = function (term, subject, code) {
        if (term === void 0) { term = (0, utils_1.getCurrentTerm)(); }
        return __awaiter(this, void 0, void 0, function () {
            var url, res;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        url = (0, urls_1.classScheduleListingUrl)(term, subject.toUpperCase(), code);
                        return [4 /*yield*/, (0, got_1.default)(url)];
                    case 1:
                        res = _b.sent();
                        _a = {};
                        return [4 /*yield*/, (0, courseListingEntries_1.classScheduleListingExtractor)(cheerio.load(res.body))];
                    case 2: return [2 /*return*/, (_a.response = _b.sent(),
                            _a.timestamp = new Date(),
                            _a.url = url,
                            _a)];
                }
            });
        });
    };
    /**
     * Gets seats and waitList seats for a given course section from BAN1P
     *
     * @param term i.e. '202009', '202101'
     * @param crn ie. '12345', '20001'
     */
    UVicCourseScraper.getSectionSeats = function (term, crn) {
        return __awaiter(this, void 0, void 0, function () {
            var url, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = (0, urls_1.detailedClassInformationUrl)(term, crn);
                        return [4 /*yield*/, (0, got_1.default)(url)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, {
                                response: (0, detailedClassInformation_1.detailedClassInfoExtractor)(cheerio.load(res.body)),
                                timestamp: new Date(),
                                url: url,
                            }];
                }
            });
        });
    };
    /**
     * Gets all subjects from the BAN1P. Automatically uses the current term if not defined.
     * @param term i.e. '202009', '202101'
     */
    UVicCourseScraper.getSubjects = function (term) {
        if (term === void 0) { term = (0, utils_1.getCurrentTerm)(); }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (0, got_1.default)((0, urls_1.subjectsUrl)((0, utils_1.getCatalogIdForTerm)(term))).json()];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Gets all the buildings on the UVic campus along with their full form and short form (abbreviation) and URL for more details.
     * @returns an array of BuildingInfo
     */
    UVicCourseScraper.getBuildings = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = 'https://www.uvic.ca/search/maps-buildings/index.php';
                        return [4 /*yield*/, (0, got_1.default)(url)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, {
                                response: (0, mapsAndBuildings_1.mapsAndBuildingsExtractor)(cheerio.load(res.body)),
                                timestamp: new Date(),
                                url: url,
                            }];
                }
            });
        });
    };
    UVicCourseScraper.subjectCodeToPidMap = new Map();
    UVicCourseScraper.subjectCodeToPidMapper = function (term, kuali) {
        kuali.forEach(function (v) {
            UVicCourseScraper.subjectCodeToPidMap.set("" + term + v.__catalogCourseId, v.pid);
        });
        return UVicCourseScraper.subjectCodeToPidMap;
    };
    return UVicCourseScraper;
}());
exports.UVicCourseScraper = UVicCourseScraper;
