"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KualiCourseItemParser = void 0;
var cheerio = __importStar(require("cheerio"));
/**
 * Parses the pre and co-reqs from the Kuali data into a usable format.
 *
 * @param preCoReqs HTML from the Kuali attribute
 * @returns parsed pre and co-reqs in JSON format
 */
function parsePreCoReqs(preCoReqs) {
    var reqs = [];
    var quantityRegex = /(Complete|(?<coreq>Completed or concurrently enrolled in)) *(?<quantity>all|\d)* (of|(?<units>units from))/;
    var earnMinimumRegex = /Earn(ed)? a minimum (?<unit>grade|GPA) of (?<min>[^ ]+) (in (?<quantity>\d+))?/;
    var courseRegex = /(?<subject>\w{2,4})(?<code>\d{3}\w?)/;
    var $ = cheerio.load(preCoReqs);
    // Iterate through each unordered list in the HTML
    $('ul')
        .first()
        .children('li,div')
        .each(function (_i, el) {
        var item = $(el);
        var quantityMatch = quantityRegex.exec(item.text());
        var earnMinMatch = earnMinimumRegex.exec(item.text());
        // If the current target has nested information
        if (item.find('ul').length) {
            var nestedReq = {};
            // If the nested requisites require a certain quantity
            // i.e. "Complete X of the following:"
            if (quantityRegex.test(item.text()) && (quantityMatch === null || quantityMatch === void 0 ? void 0 : quantityMatch.groups)) {
                if (quantityMatch.groups.quantity === 'all') {
                    nestedReq.quantity = 'ALL';
                }
                else {
                    nestedReq.quantity = Number(quantityMatch.groups.quantity);
                }
                if (quantityMatch.groups.coreq) {
                    nestedReq.coreq = true;
                }
                if (quantityMatch.groups.units) {
                    nestedReq.units = true;
                }
            }
            // Else if the nested requisites require a minimum
            // i.e. "Earned a minimum GPA of X in Y"
            else if (earnMinimumRegex.test(item.text()) && (earnMinMatch === null || earnMinMatch === void 0 ? void 0 : earnMinMatch.groups)) {
                if (earnMinMatch.groups.quantity) {
                    if (earnMinMatch.groups.quantity === 'all') {
                        nestedReq.quantity = 'ALL';
                    }
                    else {
                        nestedReq.quantity = Number(earnMinMatch.groups.quantity);
                    }
                }
                else {
                    nestedReq.quantity = 'ALL';
                }
                // add grade or gpa values to nestedReq object
                nestedReq[earnMinMatch.groups.unit.toLowerCase()] = earnMinMatch.groups.min;
            }
            else {
                nestedReq.unparsed = item.text();
            }
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            nestedReq.reqList = parsePreCoReqs(item.html());
            reqs.push(nestedReq);
        }
        else {
            // If it finds a UVic course as the req
            if (item.find('a').length) {
                var course = { subject: '', code: '' };
                var courseText = item.find('a').text();
                var courseMatch = courseRegex.exec(courseText);
                if (courseRegex.test(courseText) && (courseMatch === null || courseMatch === void 0 ? void 0 : courseMatch.groups)) {
                    course.subject = courseMatch.groups.subject;
                    course.code = courseMatch.groups.code;
                    reqs.push(course);
                }
            }
            // Any other possible reqs
            else {
                reqs.push(item.text());
            }
        }
    });
    return reqs;
}
function hoursCatalog(hours) {
    var eachHour = [];
    //store the hours in a new array.
    hours.forEach(function (element) {
        var temp = element.split('-');
        eachHour.push({ lecture: temp[0], lab: temp[1], tutorial: temp[2] });
    });
    return eachHour;
}
function KualiCourseItemParser(course) {
    // strip HTML tags from courseDetails.description
    course.description = course.description ? course.description.replace(/(<([^>]+)>)/gi, '') : '';
    var hoursCatalogText = course.hoursCatalogText, preAndCorequisites = course.preAndCorequisites, preOrCorequisites = course.preOrCorequisites;
    //split the hours if we have more than one.
    var hours = hoursCatalogText === null || hoursCatalogText === void 0 ? void 0 : hoursCatalogText.split(' or ');
    return __assign(__assign({}, course), { hoursCatalog: hours ? hoursCatalog(hours) : undefined, preAndCorequisites: preAndCorequisites ? parsePreCoReqs(preAndCorequisites) : undefined, preOrCorequisites: preOrCorequisites ? parsePreCoReqs(preOrCorequisites) : undefined });
}
exports.KualiCourseItemParser = KualiCourseItemParser;
